//Posted by Carl Robo, a member of the community in the CronusMAX Forums - https://cronusmax.com/forums
 
//Posted : Friday 20th of September, 2019 15:42 CST6CDT  
 
// GPC Online Library// infinite_warfare_ps4.gpc
 
 
/*
#############################################################
###INFINITE WARFARE ### SCRIPT PUT TOGETHER BY Carl Robo. ###
#############################################################
 
 
#######################################################################                        ############################################
### SCRIPT / LONGJUMP SHOT / AUTO SPRINT / RAPID FIRE / AIM ASSIST. ###                        #   I HAVE LOTS OF FUN WITH THIS SCRIPT    #
#######################################################################                        #   AS SOON AS YOU FIRE YOU DO A LONG JUMP #
                                                                                               #                                          #
##################################################                                             #   I HAVE HAD LOTS OF KILLS USING THIS    #
### SPECIAL THANKS TO x22DOT FOR THE AIM ASSIST###                                             #   PLEASE ENJOY                           #
##################################################                                             ############################################                   
 
 
##############################################################################
### SPECIAL THANKS TO EXCALIBUR FOR SOME OF THE CODE USED OUT OF HIS S.G.I ###
##############################################################################
 
 
#####################
###   FALSE = OFF ### 
###   TRUE  = ON  ###
#####################
*/
 
 
 
 
define CONTROLLER   = TRUE;  
define MOUSE        = FALSE;
 
 
define SENSE_LOW    = FALSE;  //SENSITIVITY 1  - 4                                                  
define SENSE_MID    = TRUE;  //SENSITIVITY 5  - 14                                                
define SENSE_HIGH   = FALSE;  //SENSITIVITY 15 - 20                                                 
define SENSE_MOUSE  = FALSE;  //SENSITIVITY 20 MOUSE
 
 
define RT     = PS4_R2;
define LT     = PS4_L2;
define RX     = PS4_RX;                              
define RY     = PS4_RY;
define LX     = PS4_LX;                              
define LY     = PS4_LY;
 
 
 
 
define R_X    = PS4_RX;                              
define R_Y    = PS4_RY;                              
define L_X    = PS4_LX;                              
define L_Y    = PS4_LY;
 
 
define JUMP_BTN    = PS4_CROSS;
define SPRINT_BTN  = PS4_L3;
define FIRE_BTN      = PS4_R2;
 
 
define ADS_BTN       = PS4_L2;
define INSTA_AIM      = 95; 
define ADS_SPEED     = 50;
define INSTA_FIRE    = 95;
int ADS_sens         = TRUE;
 
 
int LongJump       = TRUE; 
int NotReloading   = TRUE;
int rapid_onoff    = TRUE;
 
 
int hold_time = 60;  
int rest_time = 1;                 
int hold_timeP = 30;   
int rest_timeP = 10;                 
int hold_timeS = 30;  
int rest_timeS = 10;  
 
 
 
 
int negative_value_rt_first     = 0;
int positive_value_rt_first     = 0;
int positive_value_rt_second    = 0;
 
int negative_value_lt_first     = 0;
int positive_value_lt_first     = 0;
int positive_value_lt_second    = 0;
 
int delay       = 11;
int value       = 0;
int value2      = 0;
 
 
main { 
 
 
   if(get_val(FIRE_BTN)){sensitivity(FIRE_BTN, 10, 100 + INSTA_FIRE);
   }
 
 
   if(get_val(ADS_BTN)){sensitivity(ADS_BTN, 10, 100 + INSTA_AIM);
   }
 
 
   if(LongJump){      
      if(event_press(PS4_L2)) combo_run(DOUBLE_JUMP);        
   } 
 
   if (get_val(L_Y)<=-95 && NotReloading && !get_val(ADS_BTN)){ combo_run( AutoSprint); } 
   else if(get_val(L_Y) > -95) { combo_stop( AutoSprint); 
   }                
 
   if(rapid_onoff){
 
      if(get_val(FIRE_BTN)   ) {      
         combo_run(RAPID_FIRE);                        
      }else if(combo_running(RAPID_FIRE)){             
         combo_stop(RAPID_FIRE);                       
      }                                                
    }
 
if(CONTROLLER == TRUE && MOUSE == FALSE) {
 
            value   = 28;
            value2  = -28;
        }
 
        if(MOUSE == TRUE && CONTROLLER == FALSE) { 
 
            value   = 22;
            value2  = -22;
        }
 
        if(SENSE_MOUSE == TRUE) { 
            positive_value_lt_first  = 22;
            positive_value_lt_second = 22;
            negative_value_lt_first  = -22;
 
            negative_value_rt_first  = -32;
            positive_value_rt_first  = 32;
            positive_value_rt_second = 22;
        }
 
        if(SENSE_HIGH == TRUE) {
 
            negative_value_lt_first     = -24;
            positive_value_lt_first     = 24;
            positive_value_lt_second    = 24;
 
            negative_value_rt_first     = -33;
            positive_value_rt_first     = 33;
            positive_value_rt_second    = 23;
        }
 
        if(SENSE_MID == TRUE) {
 
            negative_value_lt_first     = -25;
            positive_value_lt_first     = 25;
            positive_value_lt_second    = 25;
 
            negative_value_rt_first     = -34;
            positive_value_rt_first     = 34;
            positive_value_rt_second    = 23;
        }
 
        if(SENSE_LOW == TRUE) {
 
            negative_value_lt_first     = -27;
            positive_value_lt_first     = 27;
            positive_value_lt_second    = 27;
 
            negative_value_rt_first     = -36;
            positive_value_rt_first     = 36;
            positive_value_rt_second    = 25;
        }
 
        if(get_val(LT)) {
            combo_run(LT_C);
        }
 
        if(get_val(LT) && get_val(RT)) {
            combo_stop(LT_C);
            combo_run(RT_C);
        }
 
        if(get_val(RX) < value2 || get_val(RX) > value || get_val(RY) < value2 || get_val(RY) > value
        || get_val(RX) < value2 || get_val(RX) > value || get_val(RY) < value2 || get_val(RY) > value){
            combo_stop(LT_C);
            combo_stop(RT_C);
        }
 
    }
 
    combo RAPID_FIRE {                          
      set_val(FIRE_BTN,100);                   
      wait(hold_time);                         
      set_val(FIRE_BTN,0);                     
      wait(rest_time);                         
      set_val(FIRE_BTN,0);                     
      wait(rest_time);                         
   }                      
 
 
    combo AutoSprint {                          
      set_val(SPRINT_BTN,100);                 
      wait(10);          
      set_val(SPRINT_BTN,100);                 
   }                   
 
 
    combo DOUBLE_JUMP {
      set_val(JUMP_BTN,100);       
      wait(60);      
      wait(100);      
      set_val(JUMP_BTN,100);       
      wait(1000);      
      wait(60);      
   } 
    combo LT_C {
       set_val(RY, negative_value_lt_first);          
       wait(delay)
       set_val(RX, positive_value_lt_first); 
       set_val(RY, positive_value_lt_second); 
       wait(delay) 
       set_val(RY, positive_value_lt_second); 
       wait(delay)                  
       set_val(RX, negative_value_lt_first);
       set_val(RY, positive_value_lt_second);
       wait(delay)
    }
 
    combo RT_C {
       set_val(RY, negative_value_rt_first);              
       wait(delay)
       set_val(RX, positive_value_rt_first);
       set_val(RY, positive_value_rt_second);
       wait(delay) 
       set_val(RY, positive_value_rt_second);
       wait(delay)                  
       set_val(RX, negative_value_rt_first);
       set_val(RY, positive_value_rt_second);
       wait(delay)
    }
